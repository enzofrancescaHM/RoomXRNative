package com.oney.WebRTCModule;

import java.util.concurrent.TimeUnit;
import java.util.Timer;
import java.util.TimerTask;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

import com.jiangdg.ausbc.callback.IPreviewDataCallBack;
import com.jiangdg.ausbc.camera.CameraUvcStrategy;
import com.jiangdg.ausbc.camera.bean.CameraRequest;

import com.facebook.react.bridge.ReactApplicationContext;

import org.webrtc.CapturerObserver;
import org.webrtc.NV21Buffer;
import org.webrtc.SurfaceTextureHelper;
import org.webrtc.SurfaceViewRenderer;
import org.webrtc.VideoCapturer;
import org.webrtc.VideoFrame;

import android.util.Log;
import android.util.Base64;

import android.app.PendingIntent;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbDeviceConnection;
import android.hardware.usb.UsbManager;

import android.content.Context;
import android.content.BroadcastReceiver;
import android.content.Intent;
import android.content.IntentFilter;

import android.os.SystemClock;

import android.graphics.Bitmap;
import android.graphics.SurfaceTexture;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.ImageFormat;
import android.graphics.Rect;
import android.graphics.YuvImage;
import android.graphics.Paint;
import android.graphics.Canvas;
import android.graphics.Color;

import android.os.BatteryManager;
import android.content.ClipboardManager;


public class UvcCapturer implements VideoCapturer, USBMonitor.OnDeviceConnectListener {

    private static final String TAG = "USBCAPTURER";

    private String deviceId;

    private SurfaceTextureHelper surfaceTextureHelper;
    private CapturerObserver capturerObserver;

    private int UVC_PREVIEW_WIDTH = 1280; //1024;
    private int UVC_PREVIEW_HEIGHT = 720; //768;
    private int UVC_PREVIEW_FPS = 30;

    private boolean weFoundItDisplay = false;
    public UsbDeviceConnection connection;
    public DeviceFb dFb = null;
    public DeviceCdc dCdc = null;
    public UsbDevice device = null;
    private USBMonitor monitor;
    public UsbManager mUsbManager = null;
    private Executor executor = Executors.newSingleThreadExecutor();
    private Context context;
    private boolean showLoopBack = false; // disabled at start
    private boolean pointerShow = false; // disabled at start
    private boolean chatShow = false;
    private boolean showScreen = true; // enabled at start
    private int pointerX = 200;
    private int pointerY = 100;
    private Bitmap frozenBitmap = null; // this is the last frame from video feed (for pointer and other things)
    private Bitmap chatBitmap = null;
    boolean isConnected = true; // this variable become false only when usb is disconnected...

    private static final String ACTION_USB_PERMISSION = "Capturer.USB_PERMISSION";
    private static final int USB_VENDOR_ID = 1155;
    private static final int USB_PRODUCT_ID = 41734;

    private PendingIntent mPermissionIntent;
    private Intent batteryStatus;
    int batteryPct = 100;
    

    CameraUvcStrategy mUvcStrategy; // From Jiang Dongguo's AUSBC library

    public UvcCapturer(String deviceId, CameraUvcStrategy uvcStrategy) {
        this.deviceId = deviceId.replaceAll("\\D", "");

        Log.d(TAG, "UvcCapturer.UvcCapturer->DeviceID " + this.deviceId);

        try {
            mUvcStrategy = uvcStrategy;
        } catch (Exception e) {
            Log.e(TAG, "UvcCapturer.UvcCapturer ", e);
        }

       
    }

    @Override
    public void initialize(SurfaceTextureHelper surfaceTextureHelper, Context context, CapturerObserver capturerObserver) {
        this.surfaceTextureHelper = surfaceTextureHelper;
        this.capturerObserver = capturerObserver;
        this.context = context;
        executor.execute(new Runnable() {
            @Override
            public void run() {        
                
                Log.d(TAG, "Initialize 01");
                mUsbManager = (UsbManager) ((ReactApplicationContext)context).getCurrentActivity().getSystemService("usb");
                Log.d(TAG, "Initialize 02");
                monitor = new USBMonitor(context, UvcCapturer.this);
                Log.d(TAG, "Initialize 03");
                monitor.register();
                Log.d(TAG, "Initialize 04");

                mPermissionIntent = PendingIntent.getBroadcast(context, 0, new Intent("com.univet.erglassdemo.USB_PERMISSION"), 0);
                //registerReceiver(this.mUsbDetach, new IntentFilter("android.hardware.usb.action.USB_DEVICE_DETACHED"));
                //((ReactApplicationContext)context).registerReceiver(mUsbAttach, new IntentFilter("android.hardware.usb.action.USB_DEVICE_ATTACHED"));
                //registerReceiver(this.mUsbReceiver, new IntentFilter("com.univet.erglassdemo.USB_PERMISSION"));

                Log.d(TAG, "Initialize BatteryManager");

                IntentFilter ifilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);
                batteryStatus = context.registerReceiver(null, ifilter);

            }
        });
    }

    @Override
    public void startCapture(int width, int height, int fps) {
        if (mUvcStrategy != null) {
            // stop before to free last usb instance
            if (mUvcStrategy.isCameraOpened()) {
                mUvcStrategy.stopPreview();
            }

            UVC_PREVIEW_WIDTH = width;
            UVC_PREVIEW_HEIGHT = height;
            UVC_PREVIEW_FPS = fps;

            mUvcStrategy.addPreviewDataCallBack(new IPreviewDataCallBack() {
                @Override
                public void onPreviewData(@Nullable byte[] bytes, @NonNull DataFormat dataFormat) {
                    //NV21Buffer nv21Buffer = new NV21Buffer(bytes, 1280, 720, (Runnable) null);
                    //VideoFrame frame = new VideoFrame(nv21Buffer, 0, TimeUnit.MILLISECONDS.toNanos(SystemClock.elapsedRealtime()));
                    //capturerObserver.onFrameCaptured(frame);
                    
                    NV21Buffer nv21Buffer = new NV21Buffer(bytes, UVC_PREVIEW_WIDTH, UVC_PREVIEW_HEIGHT, null);
                    VideoFrame frame = new VideoFrame(nv21Buffer, 0, System.nanoTime());
                    capturerObserver.onFrameCaptured(frame);

                    
                    //String output = String.format("showScreen: %b , showLoop: %b, pointerShow: %b",showScreen, showLoopBack, pointerShow);
                    //Log.d(TAG,output );

                    // loopback on Univet Display
                    if(dFb != null && showScreen)
                    {
                        // every frame will be converted to bitmap and fired to the display
                        YuvImage yuvImage = new YuvImage(bytes, ImageFormat.NV21, 1280, 720, null);
                        ByteArrayOutputStream os = new ByteArrayOutputStream();
                        yuvImage.compressToJpeg(new Rect(0, 0, 1280, 720), 100, os);
                        byte[] jpegByteArray = os.toByteArray();
                        try {
                            os.flush();
                        } catch (IOException e) {
                            e.printStackTrace();
                        } finally {
                            try {
                                os.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }

                        if(showLoopBack)
                        {
                            frozenBitmap = BitmapFactory.decodeByteArray(jpegByteArray, 0, jpegByteArray.length);
                            dFb.writeImage(frozenBitmap,batteryPct,false);
                        }
                        else
                        {
                            if(pointerShow)
                            {                  
                                dFb.writeImagePointer(frozenBitmap,pointerX,pointerY, false);
                            }
                            else if(chatShow)
                            {
                                dFb.writeImage(chatBitmap,batteryPct,false);   
                            }
                            else{
                                dFb.writeImage(frozenBitmap,batteryPct,false);
                            }
                        }                
                    }

                    
                }
            });

            mUvcStrategy.startPreview(getCameraRequest(), this.surfaceTextureHelper.getSurfaceTexture());
        }
    }

    @Override
    public void stopCapture() throws InterruptedException {
        if (mUvcStrategy != null) {
            if (mUvcStrategy.isCameraOpened()) {
                mUvcStrategy.stopPreview();
            }
        }
    }

    @Override
    public void changeCaptureFormat(int i, int i1, int i2) {

    }

    @Override
    public void dispose() {
        Log.d(TAG, "UvcCapturer.dispose");
        if (mUvcStrategy != null) mUvcStrategy.stopPreview();
    }

    @Override
    public boolean isScreencast() {
        return false;
    }

    @Override
    public void onConnect(UsbDevice device, USBMonitor.UsbControlBlock ctrlBlock, boolean createNew) {
        executor.execute(new Runnable() {
            @Override
            public void run() {
                Log.d(TAG, "Entering OnConnect...");
                if (monitor.hasPermission(device)) 
                {
                    Log.d(TAG, "permission OK!");
                    Log.d(TAG, "vendorID= " + device.getVendorId());
                    Log.d(TAG,String.format("DEV: %s - PID: %x - VID: %x", device.getProductName(), device.getProductId(), device.getVendorId()));

                    if(weFoundItDisplay == false && device.getProductId() == 0xa306  )
                    {
                            Log.d(TAG, "We are in!");
                            
                            weFoundItDisplay = true;

                            if (connection == null) {
                                connection = mUsbManager.openDevice(device);
                            }
                            if (connection != null) {
                                Log.d(TAG, "Connection done!");
                                
                                Log.e(TAG, device.getDeviceName());

                                // initialize Univet Display Peripheral
                                if (dFb == null) {
                                    dFb = new DeviceFb(connection, device);

                                    getBatteryStatus();

                                    String text2 = "Holomask - RoomXR";

                                    ClipboardManager clipboard = (ClipboardManager) ((ReactApplicationContext)context).getCurrentActivity().getSystemService(Context.CLIPBOARD_SERVICE);
                                    try {
                                        CharSequence text = clipboard.getPrimaryClip().getItemAt(0).getText();
                                        text2 = text.toString();
                                        if(text2 == "default")
                                        {
                                            Log.d(TAG,"default!!!");
                                            text2 = "Holomask - RoomXR";
                                        }
                                        else
                                        {
                                            Log.d(TAG, text2);
                                        }
                                    } catch (Exception e) {
                                        text2 = "Holomask - RoomXR";
                                    }



                                    Bitmap createBitmap = UnivetUtils.TextToBitmap(text2);

                                    dFb.writeImage(createBitmap,batteryPct,false);
                                }

                                // Initialize Univet IMU and Touch Peripherals
                                if(dCdc == null){
                                    Log.d(TAG, "dCdc created!");
                                    dCdc = new DeviceCdc(connection, device);

                                    
                                    try{
                                        String version = dCdc.readVersion2();
                                        Log.d(TAG, version);    
                                    }
                                    catch(UsbException e){
                                        Log.d(TAG, "readVersion: Reading Version FAILED");
                                        e.printStackTrace();
                                    }


                                    //EnableTouchpad(device); // this take too much memory, must be investigated...
                                }
                            }
                    }

                   
                }
                else{
                    Log.d(TAG, "permission problem...");
                }
            }
        });
    }
    
    @Override
    public void onDisconnect(UsbDevice device, USBMonitor.UsbControlBlock ctrlBlock) {
      Log.d(TAG, "ON DISCONNECT!");
      //isConnected = false;
    }
 
    @Override
    public void onCancel(UsbDevice device) {
        Log.d(TAG, "ON CANCEL!");
    }

    @Override
    public void onAttach(UsbDevice device) {
        Log.d(TAG, "ON ATTACH!");
        monitor.requestPermission(device);
        
        
        // PendingIntent usbPermissionIntent = PendingIntent.getBroadcast((ReactApplicationContext)context, 0, new Intent(ACTION_USB_PERMISSION), 0);
        // IntentFilter filter = new IntentFilter(ACTION_USB_PERMISSION);
        // ((ReactApplicationContext)context).registerReceiver(usbReceiver, filter);
        // mUsbManager.requestPermission(device, usbPermissionIntent);
    }

    @Override
    public void onDettach(UsbDevice device) {
      Log.d(TAG, "ON DETTACH!");
      Armageddon();
      isConnected=false;
    }


    // private final BroadcastReceiver usbReceiver = new BroadcastReceiver() {
    //     public void onReceive(Context context, Intent intent) {

    //         Log.d(TAG, "ON RECEIVE");

    //       String action = intent.getAction();
    //       if (ACTION_USB_PERMISSION.equals(action)) {
    //         synchronized (this) {
    //           UsbDevice device = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);
    
    //           if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {
    //             //if (device != null) setDevice(device);
    //             //else rejectConnectionPromise("E101", "Device is null");
    //           }
    //           else {
    //             Log.d(TAG, "permission denied for device " + device);
    //             rejectConnectionPromise("E102", "Permission denied for device");
    //           }
    //         }
    //       }
    //     }
    //   };

    // private final BroadcastReceiver mUsbReceiver = new BroadcastReceiver() {
    //     public void onReceive(Context context, Intent intent) {
    //       if ("com.univet.erglassdemo.USB_PERMISSION".equals(intent.getAction()))
    //         synchronized (this) {
    //           UsbDevice deviceUsb = (UsbDevice) intent.getParcelableExtra("device");
    //           if (intent.getBooleanExtra("permission", false)) {
    //             if (deviceUsb != null) {
    //               VisionARService.this.startConnection();
    //               VisionARService.this.batteryManager = (BatteryManager) VisionARService.this.getApplicationContext()
    //                   .getSystemService("batterymanager");
    //               if (VisionARService.this.VARListener != null) {
    //                 Log.d("VARServ", "BroadcastReceiver UsbReceiver: onConnect");
    //                 VisionARService.this.VARListener.onConnect();
    //               }
    //               if (VisionARService.this.touchpadEnabledCounter > 0) {
    //                 Log.d("VARServ", "BroadcastReceiver UsbReceiver: Restart touchpad");
    //                 VisionARService.this.EnableTouchpad();
    //               }
    //             }
    //           } else {
    
    //             Log.d("VARServ", "BroadcastReceiver UsbReceiver: lost serial, permission denied for device " + deviceUsb);
    //           }
    //         }
    //     }
    //   };

    //   private final BroadcastReceiver mUsbAttach = new BroadcastReceiver() {
    //     public void onReceive(Context context, Intent intent) {
    //       synchronized (this) {
    
    //         if ("android.hardware.usb.action.USB_DEVICE_ATTACHED".equals(intent.getAction())) {
    //             Log.d(TAG, "BROAD USB ATTACH!");
    //           UsbDevice fDevice = (UsbDevice) intent.getParcelableExtra("device");
    
    //           if (fDevice != null && fDevice.getVendorId() == 1155 && fDevice.getProductId() == 41734) {
    //             //VisionARService.this.device = fDevice;
    //             mUsbManager.requestPermission(fDevice, mPermissionIntent);
    //             Log.d(TAG, "BroadcastReceiver UsbAttach: request permission");
    //           }
    //         }
    //       }
    //     }
    //   };

    //   private final BroadcastReceiver mUsbDetach = new BroadcastReceiver() {
    //     public void onReceive(Context context, Intent intent) {
    //       if ("android.hardware.usb.action.USB_DEVICE_DETACHED".equals(intent.getAction())) {
    //         if (intent.getParcelableExtra("device") != null) {
    //           if (VisionARService.this.dCdc != null) {
    //             VisionARService.this.dCdc.close();
    //             VisionARService.this.dCdc = null;
    //           }
    //           if (VisionARService.this.dFb != null) {
    //             VisionARService.this.dFb = null;
    //           }
    //           if (VisionARService.this.connection != null) {
    //             VisionARService.this.connection.close();
    //             VisionARService.this.connection = null;
    //             if (VisionARService.this.VARListener != null) {
    //               Log.d("VARServ", "BroadcastReceiver UsbDetach: onDisconnect");
    //               VisionARService.this.VARListener.onDisconnect();
    //             }
    //           }
    //         }
    //       }
    //     }
    //   };

      private void rejectConnectionPromise(String code, String message) {
        Log.e(TAG, message);
        //connectionPromise.reject(code, message);
        //connectionPromise = null;
      }

    private CameraRequest getCameraRequest() {
        return new CameraRequest
                .Builder()
                .setCameraId(this.deviceId)
                .setFrontCamera(false)
                .setContinuousAFModel(true)
                .setContinuousAutoModel(true)
                .setPreviewWidth(UVC_PREVIEW_WIDTH)
                .setPreviewHeight(UVC_PREVIEW_HEIGHT)
                .create();
    }

    public void getBatteryStatus(){
        int level = batteryStatus.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);
        int scale = batteryStatus.getIntExtra(BatteryManager.EXTRA_SCALE, -1);
        float tempb = level * 100 / (float)scale; 
        batteryPct = (int) tempb;
    }

    ///////////////////////////////////////////////
    //        External Functions                 //
    ///////////////////////////////////////////////

    // this function is an heartbeat to check if glasses
    // are still connected. Normally IsConnected is true from
    // the beginning, but it became false once usb is disconnected.
    public boolean heartBeat(/*String command*/){
        // meanwhile we read also the battery status
        getBatteryStatus();
        Log.d(TAG,String.format("BATTERY: %d / 100 ", batteryPct));
        
        return isConnected;
    }
  
      // this function writes a string on the display
      public void testWrite(String mystring){
          //Log.d("testWrite start...","hey!");
           if(dFb != null)
           {              
                if(mystring.equals("command_cleardisplay"))
                {
                    frozenBitmap = Bitmap.createBitmap(419, 138, Bitmap.Config.ARGB_8888);    
                    chatBitmap = Bitmap.createBitmap(419, 138, Bitmap.Config.ARGB_8888);    
                    chatShow = false;
                    pointerShow = false;           
                    dFb.writeImage(frozenBitmap,-1,false); 
                     
                }
                else if(mystring.equals("command_killall")){
                   Armageddon();
                }
                else if(mystring.equals("command_clearchat")){
                    chatShow = true;
                    pointerShow = false;
                    chatBitmap = Bitmap.createBitmap(419, 138, Bitmap.Config.ARGB_8888);
                    dFb.writeImage(chatBitmap,batteryPct,false); 
                }
                else if(mystring.equals("command_disconnect")){
                    frozenBitmap = Bitmap.createBitmap(419, 138, Bitmap.Config.ARGB_8888);                    
                    dFb.writeImage(frozenBitmap,batteryPct,false);
                }
                else{
                    chatShow = true;
                    pointerShow = false;
                    chatBitmap = UnivetUtils.TextToBitmap(mystring);
                    //if(showScreen)
                      dFb.writeImage(chatBitmap,batteryPct,false);      
                }
            
           }                                    
      }

      // this function delete and close all the open instances
      public void Armageddon() {
          // un-register the usbreceiver instance  
          //((ReactApplicationContext) context).unregisterReceiver(usbReceiver);
          //((ReactApplicationContext) context).unregisterReceiver(mUsbAttach);

          // close the IMU section
          if (dCdc != null) {
              dCdc.close();
              dCdc = null;
          }
          // destroy the FrameBuffer
          if (dFb != null) {
              dFb = null;
          }
          // close the connection opened
          if (connection != null) {
              Log.d(TAG, "onDestroy: Close connection");
              connection.close();
              connection = null;
          }

      }

      // enable / disable Display
      public void showDisplay(boolean showDisp) {
        showScreen = showDisp;
  
          // clean display after half a second in order to simulate display off
          // after a disconnection
          if(!showDisp) {
            Log.d(TAG,"display off!");
            Timer mytimer = new Timer();
            mytimer.schedule(new TimerTask() {
              public void run() {
                  Bitmap cleanBmp = Bitmap.createBitmap(419, 138, Bitmap.Config.ARGB_8888);
                  if(dFb != null)
                    dFb.writeImage(cleanBmp,batteryPct,false); // write black image with no battery sign    
              }
            }, 500L);
          }
          else
          {Log.d(TAG,"display on!");}
  
      }
  
      // enable / disable LoopBack Camera Feed on the display
      public void showLoopBackCamera(boolean showLoop) {
          Log.d(TAG,"showLoopBackCamera start...");
          showLoopBack = showLoop;
  
      }  
  
      public void showPointer(String message){
        //Log.d("enter ShowPointer: ",message);
  
        ArrayList aList= new ArrayList(Arrays.asList(message.split(",")));
        /*for(int i=0;i<aList.size();i++)
        {
            Log.d("oh my"," --> " + aList.get(i));
        }*/
  
        Boolean show = Boolean.parseBoolean((String) aList.get(0));
        
        int x = Integer.parseInt((String) aList.get(1));
        int y = Integer.parseInt((String) aList.get(2));
  
        pointerShow = show;
        pointerX = x;
        pointerY = y;
        
        //Log.d("pointer: ","show: " + pointerShow + "x: " + pointerX + "y: " + pointerY);
      }
  
      // show a bitmap on the display
      public void showBitmap(String bitmap64) {
          Log.d(TAG,"showBitmap start...");
          try {
            byte[] decodedString = Base64.decode(bitmap64,0);
            frozenBitmap = BitmapFactory.decodeByteArray(decodedString, 0, decodedString.length);
            if(dFb != null)
            {
              //if(showScreen)  
              chatShow = false;
                    pointerShow = false;
                dFb.writeImage(frozenBitmap,batteryPct,false);
            }
          } catch (Exception e) {
            e.printStackTrace();
          }       
      }  
}