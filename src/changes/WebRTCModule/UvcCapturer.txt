package com.oney.WebRTCModule;

import android.content.Context;
import android.util.Log;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import com.jiangdg.ausbc.callback.IPreviewDataCallBack;
import com.jiangdg.ausbc.camera.CameraUvcStrategy;
import com.jiangdg.ausbc.camera.bean.CameraRequest;

import org.webrtc.CapturerObserver;
import org.webrtc.NV21Buffer;
import org.webrtc.SurfaceTextureHelper;
import org.webrtc.SurfaceViewRenderer;
import org.webrtc.VideoCapturer;
import org.webrtc.VideoFrame;

import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbDeviceConnection;
import android.hardware.usb.UsbManager;

import java.util.concurrent.Executor;
import java.util.concurrent.Executors;

import android.graphics.Bitmap;
import com.facebook.react.bridge.ReactApplicationContext;
import android.content.BroadcastReceiver;
import android.app.PendingIntent;
import android.content.Intent;
import android.content.IntentFilter;

import android.graphics.SurfaceTexture;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.ImageFormat;
import android.graphics.Rect;
import android.graphics.YuvImage;
import android.graphics.Paint;
import android.graphics.Canvas;
import android.graphics.Color;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import android.os.SystemClock;
import java.util.concurrent.TimeUnit;
import java.util.Timer;
import java.util.TimerTask;
import java.util.ArrayList;
import java.util.Arrays;
import android.util.Base64;

public class UvcCapturer implements VideoCapturer, USBMonitor.OnDeviceConnectListener {

    private static final String TAG = WebRTCModule.TAG;

    private String deviceId;

    private SurfaceTextureHelper surfaceTextureHelper;
    private CapturerObserver capturerObserver;

    private int UVC_PREVIEW_WIDTH = 1280; //1024;
    private int UVC_PREVIEW_HEIGHT = 720; //768;
    private int UVC_PREVIEW_FPS = 30;

    private boolean weFoundItDisplay = false;
    public UsbDeviceConnection connection;
    public DeviceFb dFb = null;
    public DeviceCdc dCdc = null;
    public UsbDevice device = null;
    private USBMonitor monitor;
    public UsbManager mUsbManager = null;
    private Executor executor = Executors.newSingleThreadExecutor();
    private Context context;
    private boolean showLoopBack = false; // disabled at start
    private boolean pointerShow = false; // disabled at start
    private boolean showScreen = true; // enabled at start
    private int pointerX = 200;
    private int pointerY = 100;
    private Bitmap frozenBitmap = null; // this is the last frame from video feed (for pointer and other things)
    boolean isConnected = true; // this variable become false only when usb is disconnected...

    private static final String ACTION_USB_PERMISSION = "Capturer.USB_PERMISSION";
    

    CameraUvcStrategy mUvcStrategy; // From Jiang Dongguo's AUSBC library

    public UvcCapturer(String deviceId, CameraUvcStrategy uvcStrategy) {
        this.deviceId = deviceId.replaceAll("\\D", "");

        Log.d(TAG, "UvcCapturer.UvcCapturer->DeviceID " + this.deviceId);

        try {
            mUvcStrategy = uvcStrategy;
        } catch (Exception e) {
            Log.e(TAG, "UvcCapturer.UvcCapturer ", e);
        }

       
    }

    @Override
    public void initialize(SurfaceTextureHelper surfaceTextureHelper, Context context, CapturerObserver capturerObserver) {
        this.surfaceTextureHelper = surfaceTextureHelper;
        this.capturerObserver = capturerObserver;
        this.context = context;
        executor.execute(new Runnable() {
            @Override
            public void run() {               
                mUsbManager = (UsbManager) ((ReactApplicationContext)context).getCurrentActivity().getSystemService("usb");
                
                monitor = new USBMonitor(context, UvcCapturer.this);
                monitor.register();

            }
        });
    }

    @Override
    public void startCapture(int width, int height, int fps) {
        if (mUvcStrategy != null) {
            // stop before to free last usb instance
            if (mUvcStrategy.isCameraOpened()) {
                mUvcStrategy.stopPreview();
            }

            UVC_PREVIEW_WIDTH = width;
            UVC_PREVIEW_HEIGHT = height;
            UVC_PREVIEW_FPS = fps;

            mUvcStrategy.addPreviewDataCallBack(new IPreviewDataCallBack() {
                @Override
                public void onPreviewData(@Nullable byte[] bytes, @NonNull DataFormat dataFormat) {
                    //NV21Buffer nv21Buffer = new NV21Buffer(bytes, 1280, 720, (Runnable) null);
                    //VideoFrame frame = new VideoFrame(nv21Buffer, 0, TimeUnit.MILLISECONDS.toNanos(SystemClock.elapsedRealtime()));
                    //capturerObserver.onFrameCaptured(frame);
                    
                    
                    
                    NV21Buffer nv21Buffer = new NV21Buffer(bytes, UVC_PREVIEW_WIDTH, UVC_PREVIEW_HEIGHT, null);
                    VideoFrame frame = new VideoFrame(nv21Buffer, 0, System.nanoTime());
                    capturerObserver.onFrameCaptured(frame);

                    // loopback on Univet Display
                    if(dFb != null && showScreen)
                    {
                        // every frame will be converted to bitmap and fired to the display
                        YuvImage yuvImage = new YuvImage(bytes, ImageFormat.NV21, 1280, 720, null);
                        ByteArrayOutputStream os = new ByteArrayOutputStream();
                        yuvImage.compressToJpeg(new Rect(0, 0, 1280, 720), 100, os);
                        byte[] jpegByteArray = os.toByteArray();
                        try {
                            os.flush();
                        } catch (IOException e) {
                            e.printStackTrace();
                        } finally {
                            try {
                                os.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }

                        if(showLoopBack)
                        {
                            frozenBitmap = BitmapFactory.decodeByteArray(jpegByteArray, 0, jpegByteArray.length);
                            dFb.writeImage(frozenBitmap,0,false);
                        }
                        else
                        {
                        if(pointerShow)
                        {                  
                            dFb.writeImagePointer(frozenBitmap,pointerX,pointerY, false);
                        }
                        }                
                    }

                    
                }
            });

            mUvcStrategy.startPreview(getCameraRequest(), this.surfaceTextureHelper.getSurfaceTexture());
        }
    }

    @Override
    public void stopCapture() throws InterruptedException {
        if (mUvcStrategy != null) {
            if (mUvcStrategy.isCameraOpened()) {
                mUvcStrategy.stopPreview();
            }
        }
    }

    @Override
    public void changeCaptureFormat(int i, int i1, int i2) {

    }

    @Override
    public void dispose() {
        Log.d(TAG, "UvcCapturer.dispose");
        if (mUvcStrategy != null) mUvcStrategy.stopPreview();
    }

    @Override
    public boolean isScreencast() {
        return false;
    }

    @Override
    public void onConnect(UsbDevice device, USBMonitor.UsbControlBlock ctrlBlock, boolean createNew) {
        executor.execute(new Runnable() {
            @Override
            public void run() {
                Log.d("USB-UNIVET", "Entering OnConnect...");
                if (monitor.hasPermission(device)) 
                {
                    Log.d("USB-UNIVET", "permission OK!");
                    Log.d("USB-UNIVET", "vendorID= " + device.getVendorId());
                    Log.d("USB-UNIVET",String.format("DEV: %s - PID: %x - VID: %x", device.getProductName(), device.getProductId(), device.getVendorId()));

                    if(weFoundItDisplay == false && device.getProductId() == 0xa306  )
                    {
                            Log.d("USB-UNIVET DISPLAY", "We are in!");
                            
                            weFoundItDisplay = true;

                            if (connection == null) {
                                connection = mUsbManager.openDevice(device);
                            }
                            if (connection != null) {
                                Log.d("USB-CAMERA DISPLAY", "Connection done!");
                                
                                Log.e("name display: ", device.getDeviceName());

                                // initialize Univet Display Peripheral
                                if (dFb == null) {
                                    dFb = new DeviceFb(connection, device);

                                    Bitmap createBitmap = UnivetUtils.TextToBitmap("Univet - Holomask");

                                    dFb.writeImage(createBitmap,0,false);
                                }

                                // Initialize Univet IMU and Touch Peripherals
                                if(dCdc == null){
                                    Log.d("VARServ", "dCdc created!");
                                    dCdc = new DeviceCdc(connection, device);

                                    
                                    try{
                                        String version = dCdc.readVersion2();
                                        Log.d("VARServ", version);    
                                    }
                                    catch(UsbException e){
                                        Log.d("VARServ", "readVersion: Reading Version FAILED");
                                        e.printStackTrace();
                                    }


                                    //EnableTouchpad(device); // this take too much memory, must be investigated...
                                }
                            }
                    }

                   
                }
                else{
                    Log.d("USB-UNIVET", "permission problem...");
                }
            }
        });
    }
    
    @Override
    public void onDisconnect(UsbDevice device, USBMonitor.UsbControlBlock ctrlBlock) {
      Log.d("USB-UNIVET", "ON DISCONNECT!");
      isConnected = false;
    }
 
    @Override
    public void onCancel(UsbDevice device) {
    }

    @Override
    public void onAttach(UsbDevice device) {
        monitor.requestPermission(device);
        //UsbManager manager = (UsbManager)((ReactApplicationContext)context.getSystemService(Context.USB_SERVICE));
        
        PendingIntent usbPermissionIntent = PendingIntent.getBroadcast((ReactApplicationContext)context, 0, new Intent(ACTION_USB_PERMISSION), 0);
        IntentFilter filter = new IntentFilter(ACTION_USB_PERMISSION);
        ((ReactApplicationContext)context).registerReceiver(usbReceiver, filter);
        mUsbManager.requestPermission(device, usbPermissionIntent);
    }

    @Override
    public void onDettach(UsbDevice device) {
      Log.d("USB-UNIVET", "ON DETTACH!");
      isConnected=false;
    }


    private final BroadcastReceiver usbReceiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
          String action = intent.getAction();
          if (ACTION_USB_PERMISSION.equals(action)) {
            synchronized (this) {
              UsbDevice device = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);
    
              if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {
                //if (device != null) setDevice(device);
                //else rejectConnectionPromise("E101", "Device is null");
              }
              else {
                Log.d("USBCAPTURER", "permission denied for device " + device);
                rejectConnectionPromise("E102", "Permission denied for device");
              }
            }
          }
        }
      };

      private void rejectConnectionPromise(String code, String message) {
        Log.e("USBCAPTURER", message);
        //connectionPromise.reject(code, message);
        //connectionPromise = null;
      }

    private CameraRequest getCameraRequest() {
        return new CameraRequest
                .Builder()
                .setCameraId(this.deviceId)
                .setFrontCamera(false)
                .setContinuousAFModel(true)
                .setContinuousAutoModel(true)
                .setPreviewWidth(UVC_PREVIEW_WIDTH)
                .setPreviewHeight(UVC_PREVIEW_HEIGHT)
                .create();
    }

    ///////////////////////////////////////////////
    //        External Functions                 //
    ///////////////////////////////////////////////

    // this function is an heartbeat to check if glasses
    // are still connected. Normally IsConnected is true from
    // the beginning, but it became false once usb is disconnected.
    public boolean heartBeat(){
        return isConnected;
      }
  
      // this function writes a string on the display
      public void testWrite(String mystring){
          //Log.d("testWrite start...","hey!");
           if(dFb != null)
           {
              Bitmap createBitmap = UnivetUtils.TextToBitmap(mystring);
              if(showScreen)
                dFb.writeImage(createBitmap,0,false);
           }                                    
      }
  
      // enable / disable Display
      public void showDisplay(boolean showDisp) {
        showScreen = showDisp;
  
          // clean display after half a second in order to simulate display off
          // after a disconnection
          if(!showDisp) {
            Timer mytimer = new Timer();
            mytimer.schedule(new TimerTask() {
              public void run() {
                  Bitmap cleanBmp = Bitmap.createBitmap(419, 138, Bitmap.Config.ARGB_8888);
                  if(dFb != null)
                    dFb.writeImage(cleanBmp,-1,false); // write black image with no battery sign    
              }
            }, 500L);
          }
  
      }
  
      // enable / disable LoopBack Camera Feed on the display
      public void showLoopBackCamera(boolean showLoop) {
          //Log.d("showLoopBackCamera start...","hey!");
          showLoopBack = showLoop;
  
      }  
  
      public void showPointer(String message){
        //Log.d("ciao: ",message);
  
        ArrayList aList= new ArrayList(Arrays.asList(message.split(",")));
        /*for(int i=0;i<aList.size();i++)
        {
            Log.d("oh my"," --> " + aList.get(i));
        }*/
  
        Boolean show = Boolean.parseBoolean((String) aList.get(0));
        
        int x = Integer.parseInt((String) aList.get(1));
        int y = Integer.parseInt((String) aList.get(2));
  
        pointerShow = show;
        pointerX = x;
        pointerY = y;
        
        //Log.d("pointer: ","show: " + pointerShow + "x: " + pointerX + "y: " + pointerY);
      }
  
      // show a bitmap on the display
      public void showBitmap(String bitmap64) {
          //Log.d("showBitmap start...","hey!");
          try {
            byte[] decodedString = Base64.decode(bitmap64,0);
            frozenBitmap = BitmapFactory.decodeByteArray(decodedString, 0, decodedString.length);
            if(dFb != null)
            {
              if(showScreen)  
                dFb.writeImage(frozenBitmap,0,false);
            }
          } catch (Exception e) {
            e.printStackTrace();
          }
  
         
      }  

}