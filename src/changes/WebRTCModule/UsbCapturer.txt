package com.oney.WebRTCModule;

import android.app.PendingIntent;
import android.content.Intent;
import android.content.IntentFilter;

import android.content.Context;
import android.content.BroadcastReceiver;

import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbDeviceConnection;
import android.hardware.usb.UsbManager;

import android.graphics.SurfaceTexture;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.ImageFormat;
import android.graphics.Rect;
import android.graphics.YuvImage;
import android.graphics.Paint;
import android.graphics.Canvas;
import android.graphics.Color;




import android.view.ViewGroup;
import android.view.View;
import android.view.Surface;

import android.os.Handler;
import android.os.Looper;
import android.os.SystemClock;

import android.util.Log;


//import java.Array;
//import java.ArrayList;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
//import java.awt.Color;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import com.serenegiant.usb.IFrameCallback;
import com.serenegiant.usb.USBMonitor;
import com.serenegiant.usbcameracommon.UVCCameraHandler;
import com.serenegiant.usbcameracommon.UvcCameraDataCallBack;
import com.serenegiant.widget.UVCCameraTextureView;
import com.serenegiant.widget.CameraViewInterface;

import com.facebook.react.bridge.ReactApplicationContext;

import org.webrtc.SurfaceTextureHelper;
import org.webrtc.SurfaceViewRenderer;
import org.webrtc.VideoCapturer;
import org.webrtc.CapturerObserver;
import org.webrtc.VideoFrame;
import org.webrtc.NV21Buffer;




public class UsbCapturer implements VideoCapturer, USBMonitor.OnDeviceConnectListener, IFrameCallback {
    private Context context;
    private USBMonitor monitor;
    private SurfaceViewRenderer svVideoRender;
    private SurfaceTextureHelper surfaceTextureHelper;
    private CapturerObserver capturerObserver;
    private Executor executor = Executors.newSingleThreadExecutor();
    private boolean isRequest = false;
    private boolean weFoundIt = false;
    private boolean weFoundItDisplay = false;
    private boolean showLoopBack = true;
    private boolean pointerShow = false;
    private int pointerX = 200;
    private int pointerY = 100;

    boolean mBound             = false;

    public UsbManager mUsbManager = null;
    public UsbDeviceConnection connection;
    public DeviceFb dFb = null;
    public DeviceCdc dCdc = null;
    public UsbDevice device = null;

    private Timer timer = null;
    private Lock lock = new ReentrantLock();
    boolean isLocked = false;
    boolean isConnected = true; // this variable become false only when usb is disconnected...
    private Bitmap frozenBitmap = null; // this is the last frame from video feed (for pointer and other things)
    private static final String ACTION_USB_PERMISSION = "Capturer.USB_PERMISSION";

    public enum writeStatus {
        SUCCESS,
        FAIL;
    }

    public UsbCapturer(Context context, SurfaceViewRenderer svVideoRender) {

        this.context = context;
        this.svVideoRender = svVideoRender;
        executor.execute(new Runnable() {
            @Override
            public void run() {               
                mUsbManager = (UsbManager) ((ReactApplicationContext)context).getCurrentActivity().getSystemService("usb");
                
                monitor = new USBMonitor(context, UsbCapturer.this);
                monitor.register();

            }
        });
    }

    @Override
    public void initialize(SurfaceTextureHelper surfaceTextureHelper, Context context, CapturerObserver capturerObserver) {
        this.surfaceTextureHelper = surfaceTextureHelper;
        this.capturerObserver = capturerObserver;
    }

    @Override
    public void startCapture(int i, int i1, int i2) {

    }

    @Override
    public void stopCapture() throws InterruptedException {
        
    }

    @Override
    public void changeCaptureFormat(int i, int i1, int i2) {

    }

    @Override
    public void dispose() {
        monitor.unregister();
        monitor.destroy();

    }

    @Override
    public boolean isScreencast() {
        return false;
    }

    @Override
    public void onAttach(UsbDevice device) {
        monitor.requestPermission(device);
        //UsbManager manager = (UsbManager)((ReactApplicationContext)context.getSystemService(Context.USB_SERVICE));
        PendingIntent usbPermissionIntent = PendingIntent.getBroadcast((ReactApplicationContext)context, 0, new Intent(ACTION_USB_PERMISSION), 0);
        IntentFilter filter = new IntentFilter(ACTION_USB_PERMISSION);
        ((ReactApplicationContext)context).registerReceiver(usbReceiver, filter);
        mUsbManager.requestPermission(device, usbPermissionIntent);
    }

    @Override
    public void onDettach(UsbDevice device) {
      Log.d("USB-UNIVET", "ON DETTACH!");
      isConnected=false;
    }

    UvcCameraDataCallBack firstDataCallBack = new UvcCameraDataCallBack() {
        public final void getData(byte[] bArr) {
             
            VideoFrame videoFrame = new VideoFrame(new NV21Buffer(bArr, 1280, 720, (Runnable) null), 0, TimeUnit.MILLISECONDS.toNanos(SystemClock.elapsedRealtime()));
            capturerObserver.onFrameCaptured(videoFrame);

            // loopback on Univet Display
            if(showLoopBack && dFb != null)
            {
                // every frame will be converted to bitmap and fired to the display
                YuvImage yuvImage = new YuvImage(bArr, ImageFormat.NV21, 1280, 720, null);
                ByteArrayOutputStream os = new ByteArrayOutputStream();
                yuvImage.compressToJpeg(new Rect(0, 0, 1280, 720), 100, os);
                byte[] jpegByteArray = os.toByteArray();
                try {
                    os.flush();
                } catch (IOException e) {
                    e.printStackTrace();
                } finally {
                    try {
                        os.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }

                frozenBitmap = BitmapFactory.decodeByteArray(jpegByteArray, 0, jpegByteArray.length);

                if(pointerShow)
                {                  
                  dFb.writeImagePointer(myimg,pointerX,pointerY, false);
                }
                else
                {
                  dFb.writeImage(myimg,0,false);
                }
                
                
            }

            videoFrame.release();
            
        }
    };

    @Override
    public void onConnect(UsbDevice device, USBMonitor.UsbControlBlock ctrlBlock, boolean createNew) {
        executor.execute(new Runnable() {
            @Override
            public void run() {
                if (monitor.hasPermission(device)) 
                {
                    Log.d("USB-UNIVET", "permission OK!");
                    Log.d("USB-UNIVET", "vendorID= " + device.getVendorId());
                    Log.d("USB-UNIVET",String.format("DEV: %s - PID: %x - VID: %x", device.getProductName(), device.getProductId(), device.getVendorId()));

                    if(weFoundItDisplay == false && /*device.getProductName() == "eRGlassFb" */device.getProductId() == 0xa306 /*&& device.getVendorId() != 0*/ )
                    {
                            Log.d("USB-UNIVET DISPLAY", "We are in!");
                            
                            weFoundItDisplay = true;

                            if (connection == null) {
                                connection = mUsbManager.openDevice(device);
                            }
                            if (connection != null) {
                                Log.d("USB-CAMERA DISPLAY", "Connection done!");
                                //this.connected = true;
                                Log.e("name display: ", device.getDeviceName());

                                // initialize Univet Display Peripheral
                                if (dFb == null) {
                                    dFb = new DeviceFb(connection, device);

                                    Bitmap createBitmap = UnivetUtils.TextToBitmap("Univet - Holomask");

                                    dFb.writeImage(createBitmap,0,false);
                                }

                                // Initialize Univet IMU and Touch Peripherals
                                if(dCdc == null){
                                    Log.d("VARServ", "dCdc created!");
                                    dCdc = new DeviceCdc(connection, device);

                                    
                                    try{
                                        String version = dCdc.readVersion2();
                                        Log.d("VARServ", version);    
                                    }
                                    catch(UsbException e){
                                        Log.d("VARServ", "readVersion: Reading Version FAILED");
                                        e.printStackTrace();
                                    }


                                    //EnableTouchpad(device); // this take too much memory, must be investigated...
                                }
                            }
                    }

                    if(true)
                    if(weFoundIt == false && 
                        (device.getProductId() == 0x6366 || // this is the normal case
                          (device.getVendorId() == 0 && device.getProductId() == 0) // this is the special case in which camera is not recognized properly as in Epson BOC40
                        ) /*  && device.getVendorId() == 0  && device.getProductName() == "USB 2.0 Camera"*/
                      )
                    {
                        weFoundIt = true;

                        // try by finding the main window view.
                        ViewGroup rootView = (ViewGroup) ((ReactApplicationContext)context).getCurrentActivity().getWindow().getDecorView();
                        View myView = null;
                        
                        try {                            
                            int childViewCount = rootView.getChildCount();
                            for (int i=0; i<childViewCount;i++){
                                View workWithMe = rootView.getChildAt(i);
                                myView = workWithMe;
                                Log.d("USB-UNIVET CAMERA view: ", "id: " + workWithMe.getId());
                            }
                        } catch (ClassCastException e){
                            //Not a viewGroup here
                        } catch (NullPointerException e){
                            //Root view is null
                        }

                        // it may be called from another thread, so make sure we're in main looper
                        Handler handler = new Handler(Looper.getMainLooper());
                        handler.post(new Runnable() {
                            @Override
                            public void run() {                                 
                                 
                                 // this code is similar to UNIVET OFFICIAL APP
                                 int myWidth = 1280; // width of camera output - default: 1280
                                 int myHeight = 720 ; // height of camera output - default: 720
                                 float myPerformance = 0.5f; // streaming ratio - default: 0.5f
                                 int myZorder = 1; // zorder of the fake view - default: 0
                                 int myID = 98765342; // fake id of the fake view
                                 boolean hideSurfaceView = true; //hide the surface view because is replicated by the rtcview - default: true

                                 // just to be sure...
                                 if(hideSurfaceView)
                                    myZorder = 0; // I want to hide the surfaceview

                                 // create a UVCCameraTextureView
                                 UVCCameraTextureView mUVCCameraViewFirst =  new UVCCameraTextureView(context);
                                 // set an arbitrary ID
                                 mUVCCameraViewFirst.setId(myID);
                                 // add to the groupview with z-order parameter so that the view is not visible
                                 rootView.addView(mUVCCameraViewFirst, myZorder, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
                                 // invalidate the view in order to make it real
                                 mUVCCameraViewFirst.invalidate();                                 
                                 // reduce view dimensions
                                 
                                 if(hideSurfaceView)
                                 {
                                    ViewGroup.LayoutParams params = mUVCCameraViewFirst.getLayoutParams();
                                    params.height = (int) (64);
                                    params.width = (int) (48);
                                    mUVCCameraViewFirst.setLayoutParams(params);
                                 }


                                 CameraViewInterface uvcCameraInterface;
                                 uvcCameraInterface = (CameraViewInterface) ((ReactApplicationContext)context).getCurrentActivity().findViewById(myID);
                                 if(uvcCameraInterface != null){
                                    uvcCameraInterface.setAspectRatio(myWidth, myHeight);
                                    UVCCameraHandler createHandler = UVCCameraHandler.createHandler(((ReactApplicationContext)context).getCurrentActivity(), mUVCCameraViewFirst, myWidth, myHeight, myPerformance, firstDataCallBack);


                                    final Handler handler = new Handler();
                                    handler.postDelayed(new Runnable() {
                                        public void run() {
                                            if (!createHandler.isOpened()) {
                                                createHandler.open(ctrlBlock);
                                                
                                                SurfaceTexture surfaceTexture = mUVCCameraViewFirst.getSurfaceTexture();
                                                if (surfaceTexture != null) {
                                                    createHandler.startPreview(new Surface(surfaceTexture));                                                    
                                                    return;
                                                }
                                                
                                            }
                                        }
                                    }, 1000);
                                 }
                            }
                        });
                    }
                }
                else{
                    Log.d("USB-UNIVET", "permission problem...");
                }
            }
        });
    }

    @Override
    public void onDisconnect(UsbDevice device, USBMonitor.UsbControlBlock ctrlBlock) {
      Log.d("USB-UNIVET", "ON DISCONNECT!");
      isConnected = false;
    }

    @Override
    public void onCancel(UsbDevice device) {
    }

    @Override
    public void onFrame(ByteBuffer frame) {
    }

    private writeStatus getProtocolVersion(/*byte[] values*/) {
        //if (values.length != 2)
        //  return writeStatus.FAIL;
    
        if (/*this.connection != null && this.device != null*/true) {
          try {
            lock.lock();
            byte[] protocolVersion = this.dCdc.readVersion().getProtocolVersion();
    
            //values[0] = protocolVersion[0];
            //values[1] = protocolVersion[1];
            Log.d("VARServ", "getProtocolVersion: Reading ProtocolVersion SUCCESS");
            return writeStatus.SUCCESS;
          } catch (UsbException e) {
            Log.d("VARServ", "getProtocolVersion: Reading ProtocolVersion FAILED");
            e.printStackTrace();
          } finally {
            lock.unlock();
          }
        }
        Log.d("VARServ", "getProtocolVersion: Reading ProtocolVersion FAILED");
        return writeStatus.FAIL;
      }

    private void EnableTouchpad(UsbDevice device) {
        if (true) {
          if (timer == null) {
    
            int counterTouchpadEvent = 20;
            boolean isTouchpadAvailable = false;
    
            while (counterTouchpadEvent-- > 0) {
              try {
                lock.lock();
                isLocked = true;
                if (dCdc.readRegister((byte) -112) && dCdc.decodeImu().getKey().getKeyPressed() == 0) {
                    Log.d("VARServ", "TouchPad Available!");
                    isTouchpadAvailable = true;
                  lock.unlock();
                  isLocked = false;
                  break;
                }
              } catch (UsbException e) {
                e.printStackTrace();
                break;
              } finally {
                if(isLocked){
                    lock.unlock();
                    isLocked = false;
                }
                
              }
    
            }
    
            if (isTouchpadAvailable) {

              timer = new Timer();
              timer.schedule(new TimerTask() {
                public void run() {
                  try {
                    lock.lock();
                    isLocked = true;
                    if (dCdc != null) {
                      int key_pressed = dCdc.readKey().getKeyPressed();
    
                      if (key_pressed > 0) {
                        if (key_pressed <= 4) {
                            Log.d("KEYPRESSED","SINGLETAP");
                          //VisionARService.this.touchpadListener.onKeyChanged(VisionARService.touchpadEvent.SINGLE_TAP);
                        } else if (key_pressed <= 8) {
                            Log.d("KEYPRESSED","DOUBLETAP");
                          //VisionARService.this.touchpadListener.onKeyChanged(VisionARService.touchpadEvent.DOUBLE_TAP);
                        } else if (key_pressed == 9) {
                            Log.d("KEYPRESSED","SWIPEDOWN");
                          //VisionARService.this.touchpadListener.onKeyChanged(VisionARService.touchpadEvent.SWIPE_DOWN);
                        } else if (key_pressed == 10) {
                            Log.d("KEYPRESSED","SWIPEUP");
                          //VisionARService.this.touchpadListener.onKeyChanged(VisionARService.touchpadEvent.SWIPE_UP);
                        }
                      }
                    }
                  } catch (UsbException e) {
                    e.printStackTrace();
                  } finally {
                    if(isLocked){
                        lock.unlock();
                        isLocked = false;
                    }
                    
                  }
                }
              }, 0L, 250L);
              Log.d("VARServ", "StartTouchpad: SUCCESS");
            } else {
              Log.d("VARServ", "StartTouchpad: FAILED");
            }
          }
        }
      }

      private final BroadcastReceiver usbReceiver = new BroadcastReceiver() {
        public void onReceive(Context context, Intent intent) {
          String action = intent.getAction();
          if (ACTION_USB_PERMISSION.equals(action)) {
            synchronized (this) {
              UsbDevice device = intent.getParcelableExtra(UsbManager.EXTRA_DEVICE);
    
              if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {
                //if (device != null) setDevice(device);
                //else rejectConnectionPromise("E101", "Device is null");
              }
              else {
                Log.d("USBCAPTURER", "permission denied for device " + device);
                rejectConnectionPromise("E102", "Permission denied for device");
              }
            }
          }
        }
      };

      private void rejectConnectionPromise(String code, String message) {
        Log.e("USBCAPTURER", message);
        //connectionPromise.reject(code, message);
        //connectionPromise = null;
      }
    
    ///////////////////////////////////////////////
    //        External Functions                 //
    ///////////////////////////////////////////////

    // this function is an heartbeat to check if glasses
    // are still connected. Normally IsConnected is true from
    // the beginning, but it became false once usb is disconnected.
    public boolean heartBeat(){
      return isConnected;
    }

    // this function writes a string on the display
    public void testWrite(String mystring){
        //Log.d("testWrite start...","hey!");
         if(dFb != null)
         {
            Bitmap createBitmap = UnivetUtils.TextToBitmap(mystring);
            dFb.writeImage(createBitmap,0,false);
         }                                    
    }

    // enable / disable LoopBack Camera Feed on the display
    public void showLoopBackCamera(boolean showLoop) {
        //Log.d("showLoopBackCamera start...","hey!");
        showLoopBack = showLoop;

        // clean display after half a second in order to simulate display off
        // after a disconnection
        if(!showLoop) {
          Timer mytimer = new Timer();
          mytimer.schedule(new TimerTask() {
            public void run() {
                Bitmap cleanBmp = Bitmap.createBitmap(419, 138, Bitmap.Config.ARGB_8888);
                if(dFb != null)
                  dFb.writeImage(cleanBmp,-1,false); // write black image with no battery sign    
            }
          }, 500L);
        }
    }  

    public void showPointer(String message){
      //Log.d("ciao: ",message);

      ArrayList aList= new ArrayList(Arrays.asList(message.split(",")));
      /*for(int i=0;i<aList.size();i++)
      {
          Log.d("oh my"," --> " + aList.get(i));
      }*/

      Boolean show = Boolean.parseBoolean((String) aList.get(0));
      
      int x = Integer.parseInt((String) aList.get(1));
      int y = Integer.parseInt((String) aList.get(2));

      pointerShow = show;
      pointerX = x;
      pointerY = y;
      
      //Log.d("pointer: ","show: " + pointerShow + "x: " + pointerX + "y: " + pointerY);
    }

    // show a bitmap on the display
    public void showBitmap(Bitmap bitmapToShow) {
        //Log.d("showBitmap start...","hey!");
        if(dFb != null)
        {
            dFb.writeImage(bitmapToShow,0,false);
        }
    }  
  }