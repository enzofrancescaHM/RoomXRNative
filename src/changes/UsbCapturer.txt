package com.oney.WebRTCModule;

import android.content.Context;
import android.hardware.usb.UsbDevice;
import android.util.Log;
import android.view.SurfaceView;
import android.view.ViewGroup;
import android.view.View;
import android.app.Activity;

import com.serenegiant.usb.IFrameCallback;
import com.serenegiant.usb.USBMonitor;
import com.serenegiant.usb.UVCCamera;
import com.serenegiant.usbcameracommon.UVCCameraHandler;
import com.serenegiant.usbcameracommon.UvcCameraDataCallBack;

import com.facebook.react.bridge.ReactApplicationContext;

import org.webrtc.SurfaceTextureHelper;
import org.webrtc.SurfaceViewRenderer;
import org.webrtc.VideoCapturer;
import org.webrtc.CapturerObserver;
import org.webrtc.VideoFrame;
import org.webrtc.NV21Buffer;

import java.nio.ByteBuffer;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.Arrays;
//import java.util.ArrayUtils;

import org.webrtc.*;


public class UsbCapturer implements VideoCapturer, USBMonitor.OnDeviceConnectListener, IFrameCallback {
    private Context context;
    private USBMonitor monitor;
    private SurfaceViewRenderer svVideoRender;
    private SurfaceTextureHelper surfaceTextureHelper;
    private CapturerObserver capturerObserver;
    private Executor executor = Executors.newSingleThreadExecutor();
    private boolean isRequest = false;
    private boolean weFoundIt = false;

    public UsbCapturer(Context context, SurfaceViewRenderer svVideoRender) {
        this.context = context;
        this.svVideoRender = svVideoRender;
        executor.execute(new Runnable() {
            @Override
            public void run() {
                monitor = new USBMonitor(context, UsbCapturer.this);
                monitor.register();
            }
        });
    }

    @Override
    public void initialize(SurfaceTextureHelper surfaceTextureHelper, Context context, CapturerObserver capturerObserver) {
        this.surfaceTextureHelper = surfaceTextureHelper;
        this.capturerObserver = capturerObserver;
    }

    @Override
    public void startCapture(int i, int i1, int i2) {

    }

    @Override
    public void stopCapture() throws InterruptedException {
        if(camera != null){
            camera.stopPreview();
            camera.close();
            camera.destroy();
        }
    }

    @Override
    public void changeCaptureFormat(int i, int i1, int i2) {

    }

    @Override
    public void dispose() {
        monitor.unregister();
        monitor.destroy();

    }

    @Override
    public boolean isScreencast() {
        return false;
    }


    

    @Override
    public void onAttach(UsbDevice device) {
        monitor.requestPermission(device);
    }

    @Override
    public void onDettach(UsbDevice device) {
        
    }

    UVCCamera camera;
    //UVCCameraHandler mHandlerFirst;
    //UVCCameraTextureView mUVCCameraViewFirst;

    @Override
    public void onConnect(UsbDevice device, USBMonitor.UsbControlBlock ctrlBlock, boolean createNew) {
        executor.execute(new Runnable() {
            @Override
            public void run() {
                if (monitor.hasPermission(device)) 
                {
                    Log.d("ciccio!", "permission OK!");
                    Log.d("ciccio!", "vendorID= " + device.getVendorId());
                    Log.d("ciccio",String.format("DEV: %s - PID: %x - VID: %x", device.getProductName(), device.getProductId(), device.getVendorId()));

                    if(weFoundIt == false && device.getProductId() == 0 && device.getVendorId() == 0)
                    {
                        weFoundIt = true;

                        Log.d("ciccio!", "prima della new UVCCamera");
                        camera = new UVCCamera();
                        Log.d("ciccio!", "prima della open");
                        camera.open(ctrlBlock);
                        try {
                            Log.d("ciccio!", "prima della setpreviewsize");
                            camera.setPreviewSize(640, 480, UVCCamera.FRAME_FORMAT_MJPEG);
                        } catch (final IllegalArgumentException e) {
                            try {
                                Log.d("ciccio!", "prima dello strano try");
                                camera.setPreviewSize(640, 480, UVCCamera.DEFAULT_PREVIEW_MODE);
                            } catch (final IllegalArgumentException e1) {
                                Log.d("ciccio!", "uh oh!");
                                camera.destroy();
                                camera = null;
                            }
                        }

                        // Il problema Ã¨ creare una superfice per la preview...
                        //SurfaceView surface = new SurfaceView(context);
                        
                        // try with SurfaceTExtureHelper
                        //EglBase.Context eglContext = EglUtils.getRootEglBaseContext();
                        //SurfaceTextureHelper surfaceTextureHelper = SurfaceTextureHelper.create("CaptureThread", eglContext);
                        //if (surfaceTextureHelper == null) {
                        //    Log.d("ciccio!", "Error creating SurfaceTextureHelper");  
                        //}
                        //camera.setPreviewDisplay(surfaceTextureHelper.getSurfaceTexture().getHolder());
                        
                        // original code
                        //camera.setPreviewDisplay(svVideoRender.getHolder());


                        // try by finding the main window view... I don't know... :)
                        ViewGroup rootView = (ViewGroup) ((ReactApplicationContext)context).getCurrentActivity().getWindow().getDecorView();

                        try {
                            //ViewGroup rootView = (ViewGroup) getView();
                            int childViewCount = rootView.getChildCount();
                            for (int i=0; i<childViewCount;i++){
                                View workWithMe = rootView.getChildAt(i);
                                Log.d("ciccio view!", "id: " + workWithMe.getId());
                            }
                        } catch (ClassCastException e){
                            //Not a viewGroup here
                        } catch (NullPointerException e){
                            //Root view is null
                        }
                        
                        //camera.setPreviewDisplay(((SurfaceView)view).getHolder().getSurface());
                        
                        Log.d("ciccio!", "prima dellla setframecallback");
                        camera.setFrameCallback(UsbCapturer.this, UVCCamera.PIXEL_FORMAT_NV21);
                        Log.d("ciccio!", "prima della startpreview");
                        camera.startPreview();
                    }
                }
                else{
                    Log.d("ciccio!", "permission problem...");
                }
            }
        });
    }

    @Override
    public void onDisconnect(UsbDevice device, USBMonitor.UsbControlBlock ctrlBlock) {
    }

    @Override
    public void onCancel(UsbDevice device) {
    }


    @Override
    public void onFrame(ByteBuffer frame) {
    executor.execute(new Runnable() {
        @Override
        public void run() {
            Log.d("ciccio","siamo nel frame catturato!!!!!!!!!!");
            byte[] imageArray = new byte[frame.remaining()];
            frame.get(imageArray);
            Long imageTime = System.currentTimeMillis();

            VideoFrame.Buffer mNV21Buffer = new NV21Buffer(imageArray, 640, 480, null);

            VideoFrame mVideoFrame = new VideoFrame(mNV21Buffer, 0, imageTime);
            capturerObserver.onFrameCaptured(mVideoFrame);


            //capturerObserver.onByteBufferFrameCaptured(imageArray, UVCCamera.DEFAULT_PREVIEW_WIDTH, UVCCamera.DEFAULT_PREVIEW_HEIGHT, 0, imageTime);
        }
    });

}
}