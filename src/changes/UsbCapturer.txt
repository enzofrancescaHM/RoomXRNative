package com.oney.WebRTCModule;

import android.content.Context;
import android.hardware.usb.UsbDevice;
import android.util.Log;
import android.view.SurfaceView;
import android.view.Surface;
import android.view.SurfaceHolder;
import android.graphics.SurfaceTexture;
import android.view.ViewGroup;
import android.view.View;
import android.app.Activity;
import android.os.Handler;
import android.os.Looper;
import android.os.SystemClock;
import java.util.concurrent.TimeUnit;

import com.serenegiant.usb.IFrameCallback;
import com.serenegiant.usb.USBMonitor;
//import com.serenegiant.usb.UVCCamera;
import com.serenegiant.usbcameracommon.UVCCameraHandler;
import com.serenegiant.usbcameracommon.UvcCameraDataCallBack;
import com.serenegiant.widget.UVCCameraTextureView;
import com.serenegiant.widget.CameraViewInterface;

import com.facebook.react.bridge.ReactApplicationContext;

import org.webrtc.SurfaceTextureHelper;
import org.webrtc.SurfaceViewRenderer;
import org.webrtc.VideoCapturer;
import org.webrtc.CapturerObserver;
import org.webrtc.VideoFrame;
import org.webrtc.NV21Buffer;

import java.nio.ByteBuffer;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.Arrays;


import org.webrtc.*;


public class UsbCapturer implements VideoCapturer, USBMonitor.OnDeviceConnectListener, IFrameCallback {
    private Context context;
    private USBMonitor monitor;
    private SurfaceViewRenderer svVideoRender;
    private SurfaceTextureHelper surfaceTextureHelper;
    private CapturerObserver capturerObserver;
    private Executor executor = Executors.newSingleThreadExecutor();
    private boolean isRequest = false;
    private boolean weFoundIt = false;

    public UsbCapturer(Context context, SurfaceViewRenderer svVideoRender) {
        this.context = context;
        this.svVideoRender = svVideoRender;
        executor.execute(new Runnable() {
            @Override
            public void run() {
                monitor = new USBMonitor(context, UsbCapturer.this);
                monitor.register();
            }
        });
    }

    @Override
    public void initialize(SurfaceTextureHelper surfaceTextureHelper, Context context, CapturerObserver capturerObserver) {
        this.surfaceTextureHelper = surfaceTextureHelper;
        this.capturerObserver = capturerObserver;
    }

    @Override
    public void startCapture(int i, int i1, int i2) {

    }

    @Override
    public void stopCapture() throws InterruptedException {
        
    }

    @Override
    public void changeCaptureFormat(int i, int i1, int i2) {

    }

    @Override
    public void dispose() {
        monitor.unregister();
        monitor.destroy();

    }

    @Override
    public boolean isScreencast() {
        return false;
    }


    

    @Override
    public void onAttach(UsbDevice device) {
        monitor.requestPermission(device);
    }

    @Override
    public void onDettach(UsbDevice device) {
        
    }

    UvcCameraDataCallBack firstDataCallBack = new UvcCameraDataCallBack() {
        public final void getData(byte[] bArr) {
             VideoFrame videoFrame = new VideoFrame(new NV21Buffer(bArr, 1280, 720, (Runnable) null), 0, TimeUnit.MILLISECONDS.toNanos(SystemClock.elapsedRealtime()));
            capturerObserver.onFrameCaptured(videoFrame);
            videoFrame.release();
            
        }
    };

    @Override
    public void onConnect(UsbDevice device, USBMonitor.UsbControlBlock ctrlBlock, boolean createNew) {
        executor.execute(new Runnable() {
            @Override
            public void run() {
                if (monitor.hasPermission(device)) 
                {
                    Log.d("ciccio!", "permission OK!");
                    Log.d("ciccio!", "vendorID= " + device.getVendorId());
                    Log.d("ciccio",String.format("DEV: %s - PID: %x - VID: %x", device.getProductName(), device.getProductId(), device.getVendorId()));

                    if(weFoundIt == false && device.getProductId() == 0 && device.getVendorId() == 0)
                    {
                        weFoundIt = true;


                        // try by finding the main window view... I don't know... :)
                        ViewGroup rootView = (ViewGroup) ((ReactApplicationContext)context).getCurrentActivity().getWindow().getDecorView();

                        View myView = null;
                        
                        try {
                            //ViewGroup rootView = (ViewGroup) getView();
                            int childViewCount = rootView.getChildCount();
                            for (int i=0; i<childViewCount;i++){
                                View workWithMe = rootView.getChildAt(i);
                                myView = workWithMe;
                                Log.d("ciccio view!", "id: " + workWithMe.getId());
                            }
                        } catch (ClassCastException e){
                            //Not a viewGroup here
                        } catch (NullPointerException e){
                            //Root view is null
                        }

                        SurfaceView surface = new SurfaceView(context);
                        surface.getHolder().setFixedSize(640, 480);

                        // it may be called from another thread, so make sure we're in main looper
                        Handler handler = new Handler(Looper.getMainLooper());
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                 
                                 
                                 // this code is similar to UNIVET OFFICIAL
                                 UVCCameraTextureView mUVCCameraViewFirst =  new UVCCameraTextureView(context);
                                 mUVCCameraViewFirst.setId(98765342);
                                 rootView.addView(mUVCCameraViewFirst, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
                                 mUVCCameraViewFirst.invalidate();

                                 CameraViewInterface uvcCameraInterface;
                                 uvcCameraInterface = (CameraViewInterface) ((ReactApplicationContext)context).getCurrentActivity().findViewById(98765342);
                                 if(uvcCameraInterface != null){
                                    uvcCameraInterface.setAspectRatio(1280, 720);
                                    UVCCameraHandler createHandler = UVCCameraHandler.createHandler(((ReactApplicationContext)context).getCurrentActivity(), mUVCCameraViewFirst, 1280, 720, 0.5f, firstDataCallBack);


                                    final Handler handler = new Handler();
                                    handler.postDelayed(new Runnable() {
                                        public void run() {
                                            if (!createHandler.isOpened()) {
                                                createHandler.open(ctrlBlock);
                                                
                                                
                                                
                                                SurfaceTexture surfaceTexture = mUVCCameraViewFirst.getSurfaceTexture();
                                                if (surfaceTexture != null) {
                                                    
                                                    createHandler.startPreview(new Surface(surfaceTexture));
                                                    
                                                    return;
                                                }
                                                
                                            }
                                        }
                                    }, 1000);

                                 }

                                 

                              
                            }
                        });
                         
                        
                      
                    }
                }
                else{
                    Log.d("ciccio!", "permission problem...");
                }
            }
        });
    }

    @Override
    public void onDisconnect(UsbDevice device, USBMonitor.UsbControlBlock ctrlBlock) {
    }

    @Override
    public void onCancel(UsbDevice device) {
    }


    @Override
    public void onFrame(ByteBuffer frame) {
    executor.execute(new Runnable() {
        @Override
        public void run() {
            Log.d("ciccio","siamo nel frame catturato!!!!!!!!!!");
        }
    });
}
}