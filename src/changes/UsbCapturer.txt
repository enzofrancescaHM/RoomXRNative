package com.oney.WebRTCModule;

import android.content.Context;
import android.hardware.usb.UsbDevice;
import android.util.Log;
import android.view.SurfaceView;
import android.view.Surface;
import android.view.SurfaceHolder;
import android.graphics.SurfaceTexture;
import android.view.ViewGroup;
import android.view.View;
import android.app.Activity;
import android.os.Handler;
import android.os.Looper;
import android.os.SystemClock;
import java.util.concurrent.TimeUnit;

import com.serenegiant.usb.IFrameCallback;
import com.serenegiant.usb.USBMonitor;
import com.serenegiant.usbcameracommon.UVCCameraHandler;
import com.serenegiant.usbcameracommon.UvcCameraDataCallBack;
import com.serenegiant.widget.UVCCameraTextureView;
import com.serenegiant.widget.CameraViewInterface;

import com.facebook.react.bridge.ReactApplicationContext;

import org.webrtc.SurfaceTextureHelper;
import org.webrtc.SurfaceViewRenderer;
import org.webrtc.VideoCapturer;
import org.webrtc.CapturerObserver;
import org.webrtc.VideoFrame;
import org.webrtc.NV21Buffer;

import java.nio.ByteBuffer;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.Arrays;

import org.webrtc.*;


public class UsbCapturer implements VideoCapturer, USBMonitor.OnDeviceConnectListener, IFrameCallback {
    private Context context;
    private USBMonitor monitor;
    private SurfaceViewRenderer svVideoRender;
    private SurfaceTextureHelper surfaceTextureHelper;
    private CapturerObserver capturerObserver;
    private Executor executor = Executors.newSingleThreadExecutor();
    private boolean isRequest = false;
    private boolean weFoundIt = false;

    public UsbCapturer(Context context, SurfaceViewRenderer svVideoRender) {
        this.context = context;
        this.svVideoRender = svVideoRender;
        executor.execute(new Runnable() {
            @Override
            public void run() {
                monitor = new USBMonitor(context, UsbCapturer.this);
                monitor.register();
            }
        });
    }

    @Override
    public void initialize(SurfaceTextureHelper surfaceTextureHelper, Context context, CapturerObserver capturerObserver) {
        this.surfaceTextureHelper = surfaceTextureHelper;
        this.capturerObserver = capturerObserver;
    }

    @Override
    public void startCapture(int i, int i1, int i2) {

    }

    @Override
    public void stopCapture() throws InterruptedException {
        
    }

    @Override
    public void changeCaptureFormat(int i, int i1, int i2) {

    }

    @Override
    public void dispose() {
        monitor.unregister();
        monitor.destroy();

    }

    @Override
    public boolean isScreencast() {
        return false;
    }


    

    @Override
    public void onAttach(UsbDevice device) {
        monitor.requestPermission(device);
    }

    @Override
    public void onDettach(UsbDevice device) {
        
    }

    UvcCameraDataCallBack firstDataCallBack = new UvcCameraDataCallBack() {
        public final void getData(byte[] bArr) {
             
            VideoFrame videoFrame = new VideoFrame(new NV21Buffer(bArr, 1280, 720, (Runnable) null), 0, TimeUnit.MILLISECONDS.toNanos(SystemClock.elapsedRealtime()));
            capturerObserver.onFrameCaptured(videoFrame);
            videoFrame.release();
            
        }
    };

    @Override
    public void onConnect(UsbDevice device, USBMonitor.UsbControlBlock ctrlBlock, boolean createNew) {
        executor.execute(new Runnable() {
            @Override
            public void run() {
                if (monitor.hasPermission(device)) 
                {
                    Log.d("USB-CAMERA", "permission OK!");
                    Log.d("USB-CAMERA", "vendorID= " + device.getVendorId());
                    Log.d("USB-CAMERA",String.format("DEV: %s - PID: %x - VID: %x", device.getProductName(), device.getProductId(), device.getVendorId()));

                    if(weFoundIt == false && device.getProductId() == 0 && device.getVendorId() == 0)
                    {
                        weFoundIt = true;

                        // try by finding the main window view.
                        ViewGroup rootView = (ViewGroup) ((ReactApplicationContext)context).getCurrentActivity().getWindow().getDecorView();
                        View myView = null;
                        
                        try {                            
                            int childViewCount = rootView.getChildCount();
                            for (int i=0; i<childViewCount;i++){
                                View workWithMe = rootView.getChildAt(i);
                                myView = workWithMe;
                                Log.d("USB-CAMERA view: ", "id: " + workWithMe.getId());
                            }
                        } catch (ClassCastException e){
                            //Not a viewGroup here
                        } catch (NullPointerException e){
                            //Root view is null
                        }

                        // it may be called from another thread, so make sure we're in main looper
                        Handler handler = new Handler(Looper.getMainLooper());
                        handler.post(new Runnable() {
                            @Override
                            public void run() {                                 
                                 
                                 // this code is similar to UNIVET OFFICIAL APP
                                 int myWidth = 1280; // width of camera output - default: 1280
                                 int myHeight = 720 ; // height of camera output - default: 720
                                 float myPerformance = 0.5f; // streaming ratio - default: 0.5f
                                 int myZorder = 1; // zorder of the fake view - default: 0
                                 int myID = 98765342; // fake id of the fake view
                                 boolean hideSurfaceView = true; //hide the surface view because is replicated by the rtcview - default: true

                                 // just to be sure...
                                 if(hideSurfaceView)
                                    myZorder = 0; // I want to hide the surfaceview

                                 // create a UVCCameraTextureView
                                 UVCCameraTextureView mUVCCameraViewFirst =  new UVCCameraTextureView(context);
                                 // set an arbitrary ID
                                 mUVCCameraViewFirst.setId(myID);
                                 // add to the groupview with z-order parameter so that the view is not visible
                                 rootView.addView(mUVCCameraViewFirst, myZorder, new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT));
                                 // invalidate the view in order to make it real
                                 mUVCCameraViewFirst.invalidate();                                 
                                 // reduce view dimensions
                                 
                                 if(hideSurfaceView)
                                 {
                                    ViewGroup.LayoutParams params = mUVCCameraViewFirst.getLayoutParams();
                                    params.height = (int) (64);
                                    params.width = (int) (48);
                                    mUVCCameraViewFirst.setLayoutParams(params);
                                 }


                                 CameraViewInterface uvcCameraInterface;
                                 uvcCameraInterface = (CameraViewInterface) ((ReactApplicationContext)context).getCurrentActivity().findViewById(myID);
                                 if(uvcCameraInterface != null){
                                    uvcCameraInterface.setAspectRatio(myWidth, myHeight);
                                    UVCCameraHandler createHandler = UVCCameraHandler.createHandler(((ReactApplicationContext)context).getCurrentActivity(), mUVCCameraViewFirst, myWidth, myHeight, myPerformance, firstDataCallBack);


                                    final Handler handler = new Handler();
                                    handler.postDelayed(new Runnable() {
                                        public void run() {
                                            if (!createHandler.isOpened()) {
                                                createHandler.open(ctrlBlock);
                                                
                                                SurfaceTexture surfaceTexture = mUVCCameraViewFirst.getSurfaceTexture();
                                                if (surfaceTexture != null) {
                                                    createHandler.startPreview(new Surface(surfaceTexture));                                                    
                                                    return;
                                                }
                                                
                                            }
                                        }
                                    }, 1000);
                                 }
                            }
                        });
                    }
                }
                else{
                    Log.d("USB-CAMERA", "permission problem...");
                }
            }
        });
    }

    @Override
    public void onDisconnect(UsbDevice device, USBMonitor.UsbControlBlock ctrlBlock) {
    }

    @Override
    public void onCancel(UsbDevice device) {
    }

    @Override
    public void onFrame(ByteBuffer frame) {
    }
}