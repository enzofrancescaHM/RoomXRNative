
import { NativeModules } from 'react-native';
import { defineCustomEventTarget } from 'event-target-shim';

import getDisplayMedia from './getDisplayMedia';
import getUserMedia from './getUserMedia';
import showTextMessage from './showTextMessage';
import showLoopBackCamera from './showLoopBackCamera';
import showPointer from './showPointer';
import showBitmap from './showBitmap';
import showDisplay from './showDisplay';
import heartBeat from './heartBeat';


// audio part
import EventEmitter from './EventEmitter';
import RTCEvent from './RTCEvent';



const { WebRTCModule } = NativeModules;

const MEDIA_DEVICES_EVENTS = ['devicechange'];

class MediaDevices extends defineCustomEventTarget(...MEDIA_DEVICES_EVENTS) {

    constructor() {
        super();
        this._registerEvents();
    }

    /**
     * W3C "Media Capture and Streams" compatible {@code enumerateDevices}
     * implementation.
     */
    enumerateDevices() {
        return new Promise(resolve => WebRTCModule.enumerateDevices(resolve));
    }

    /**
     * W3C "Screen Capture" compatible {@code getDisplayMedia} implementation.
     * See: https://w3c.github.io/mediacapture-screen-share/
     *
     * @returns {Promise}
     */
    getDisplayMedia() {
        return getDisplayMedia();
    }

    /**
     * W3C "Media Capture and Streams" compatible {@code getUserMedia}
     * implementation.
     * See: https://www.w3.org/TR/mediacapture-streams/#dom-mediadevices-enumeratedevices
     *
     * @param {*} constraints
     * @returns {Promise}
     */
    getUserMedia(constraints) {
        return getUserMedia(constraints);
    }

    showTextMessage(message){
        return showTextMessage(message);
    }

    showLoopBackCamera(show){
        return showLoopBackCamera(show);
    }

    heartBeat(command) {
        //return new Promise(resolve => WebRTCModule.heartBeat(resolve));
        return heartBeat(command)
    }

    showPointer(message){
        return showPointer(message);
    }

    showBitmap(bitmap64){
        return showBitmap(bitmap64);
    }

    showDisplay(show){
        return showDisplay(show);
    }

    setAudioDevice(device){
        return WebRTCModule.setAudioDevice(device);
    }

    startMediaDevicesEventMonitor(){
        return WebRTCModule.startMediaDevicesEventMonitor();
    }

    _registerEvents(): void {
        console.log('MediaDevices _registerEvents invoked');
        WebRTCModule.startMediaDevicesEventMonitor();
        EventEmitter.addListener('mediaDevicesOnDeviceChange', ev => {
            console.log('MediaDevices => mediaDevicesOnDeviceChange');
            //let nystring:string = 'devicechange';
            //let myevent:RTCEvent = new RTCEvent(nystring);
            this.dispatchEvent(new RTCEvent("deviceChange"));
        });
    }

}

export default new MediaDevices();
